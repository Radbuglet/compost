{%- set MAX_ARITY = 12 -%}

use core::{borrow::{Borrow, BorrowMut}, marker::PhantomData, ops::Deref, ptr::NonNull};

// === Tuple Expansion === //

pub struct TupleRemainder<T> {
    pub macro_internal_dont_touch: T,
}

pub struct TupleInputHole {
    _private: (),
}

impl TupleInputHole {
    fn new_mut<'a>() -> &'a mut Self {
        unsafe {
            // Safety: ZSTs can dangle.
            NonNull::<Self>::dangling().as_mut()
        }
    }
}

// First, we define a mechanism for expanding all input tuples to tuples of the same arity.
pub trait NormalizeArity<'a> {
    type Target;

    fn normalize_arity(&'a mut self) -> Self::Target;
}

{% for i in range(0, MAX_ARITY + 1) -%}
impl<'a{{ ", " if i > 0 else "" }}
    {%- for j in range(0, i) %}P{{j}}: 'a{{ '' if loop.last else ', ' }}{% endfor -%}
> NormalizeArity<'a> for (
    {%- for j in range(0, i) %}P{{j}}{{ '' if loop.last else ', ' }}{{ "," if i == 1 else "" }}{% endfor -%}
) {
    type Target = ({% for j in range(0, MAX_ARITY) %}&'a mut {{ "P" ~ j if j < i else "TupleInputHole" }}{{ '' if loop.last else ', ' }}{% endfor %});

    fn normalize_arity(&'a mut self) -> Self::Target {
        ({% for j in range(0, MAX_ARITY) %}{{ "&mut self." ~ j if j < i else "TupleInputHole::new_mut()" }}{{ '' if loop.last else ', ' }}{% endfor %})
    }
}

{% endfor -%}

impl<'a: 'b, 'b, {%- for j in range(0, MAX_ARITY) %}P{{j}}: 'a{{ '' if loop.last else ', ' }}{% endfor -%}> NormalizeArity<'b> for TupleRemainder<(
    {%- for j in range(0, MAX_ARITY) %}&'a mut P{{j}}{{ '' if loop.last else ', ' }}{% endfor -%}
)> {
    type Target = ({%- for j in range(0, MAX_ARITY) %}&'b mut P{{j}}{{ '' if loop.last else ', ' }}{% endfor -%});

    fn normalize_arity(&'b mut self) -> Self::Target {
        let me = &mut self.macro_internal_dont_touch;

        ({%- for j in range(0, MAX_ARITY) %}&mut me.{{j}}{{ '' if loop.last else ', ' }}{% endfor -%})
    }
}

// === Tuple output inference === //

pub struct TupleOutputHole {
    _private: (),
}

// Next, we define a `TupleBuilder.
//
// First, by calling `inference_helper()` and pretending to return this as the expression value on a
// match with `Some(T)` (`inference_helper` always returns `None`), the `decompose!` macro can infer
// the type of the tuple being returnedâ€”type `T`.
//
// For a given `TupleBuilder<(P0, P1, ...)>`, the `id()` method takes a parameter of type `P0`, returns
// that value, and produces a new builder of type `TupleBuilder<(P1, P2, ...)>`. Thus, by calling
// `id(T)` repeatedly, we can force the inference engine to infer the type of the expression passed to the
// method.
//
// In the case of a `TupleBuilder<()>`, `id` will default to expecting a value of type `TupleOutputHole`.
pub struct TupleBuilder<T> {
    _ty: PhantomData<T>,
}

impl<T> TupleBuilder<T> {
    pub fn new() -> Self {
        Self { _ty: PhantomData, }
    }

    pub fn inference_helper(&self) -> Option<T> {
        None
    }
}

pub trait TupleBuilderId<V, R>: Sized {
    fn id(self, v: V) -> (V, TupleBuilder<R>) {
        (v, TupleBuilder::new())
    }
}

impl TupleBuilderId<TupleOutputHole, ()> for TupleBuilder<()> {}

{% for i in range(1, MAX_ARITY + 1) -%}

impl<
    {%- for j in range(0, i) %}P{{j}}{{"" if loop.last else ", "}}{% endfor -%}
> TupleBuilderId<P0, (
    {%- for j in range(1, i) %}P{{j}}{{"" if loop.last else ", "}}{{ "," if loop.first and loop.last else "" }}{% endfor -%}
)> for TupleBuilder<(
    {%- for j in range(0, i) %}P{{j}}{{"" if loop.last else ", "}}{{ "," if loop.first and loop.last else "" }}{% endfor -%}
)> {}
{% endfor %}
// === Tuple searching === //

// Now, we define a way to search a tuple of arity `MAX_ARITY`.
pub trait TupleSearch<T, R, V> {
    fn search(self) -> (T, R);
}

impl<T> TupleSearch<TupleOutputHole, Self, ()> for T {
    fn search(self) -> (TupleOutputHole, Self) {
        (TupleOutputHole { _private: () }, self)
    }
}

{% for i in range(0, MAX_ARITY) -%}
pub struct Disambiguator{{i}} { _private: () }
{% set rest_tup -%}
({%- for j in range(0, MAX_ARITY) %}{{ "&'a mut P" ~ j if j != i else "&'a mut TupleInputHole" }}{{ '' if loop.last else ', ' }}{% endfor -%})
{%- endset -%}

{% for is_mut in [false, true] %}
impl<'a, T: ?Sized, {{""}}
    {%- for j in range(0, MAX_ARITY) %}P{{j}}{{ '' if loop.last else ', ' }}{% endfor -%}
> TupleSearch<&'a {{ "mut " if is_mut else "" }}T, {{rest_tup}}, Disambiguator{{i}}> for ({%- for j in range(0, MAX_ARITY) %}{{ "&'a mut P" ~ j }}{{ '' if loop.last else ', ' }}{% endfor -%})
where
    P{{i}}: Borrow{{ "Mut" if is_mut else "" }}<T>,
{
    fn search(self) -> (&'a {{ "mut" if is_mut else "" }} T, {{rest_tup}}) {
        ((*self.{{i}}).borrow{{ "_mut" if is_mut else "" }}(), (
            {%- for j in range(0, MAX_ARITY) %}{{ "self." ~ j if j != i else "TupleInputHole::new_mut()" }}{{ '' if loop.last else ', ' }}{% endfor -%}
        ))
    }
}
{% endfor %}
{% endfor -%}

// === Tuple truncation === //

// Finally, we define a mechanism for truncating the end off a tuple. This is used to get rid of the
// trailing `TupleOutputHole` instances emitted at the end of the tuple once all required components
// have been acquired.
pub trait ArityTruncate<R> {
    fn truncate_arity(self) -> R;
}

{% for i in range(0, MAX_ARITY + 1) %}
{%- set truncate_tup -%}
({% for j in range(0, i) %}P{{j}}{{ "" if loop.last else ", " }}{{ "," if i == 1 else "" }}{% endfor %})
{%- endset -%}

{%- set full_paras -%}
{% for j in range(0, MAX_ARITY) %}P{{j}}{{ "" if loop.last else ", " }}{% endfor %}
{%- endset -%}
impl<{{full_paras}}> ArityTruncate<{{truncate_tup}}> for ({{full_paras}}) {
    fn truncate_arity(self) -> {{truncate_tup}} {
        ({% for j in range(0, i) %}self.{{j}}{{"" if loop.last else ", " }}{{ "," if i == 1 else ""}}{% endfor %})
    }
}

{% endfor -%}

// === Filter magic === //

pub struct FilterHoles<T>(FilterHolesPositive<T>);

pub struct FilterHolesPositive<T>(PhantomData<T>);

pub trait FilterHolesExtend<T, E> {
    type Output;

    fn extend(&self, tup: T, elem: E) -> Self::Output;
}

impl<T> FilterHoles<T> {
    pub fn new(_infer_dummy: &T) -> Self {
        Self(FilterHolesPositive(PhantomData))
    }
}

impl<T> Deref for FilterHoles<T> {
    type Target = FilterHolesPositive<T>;

    fn deref(&self) -> &Self::Target {
        &self.0
    }
}

impl<'a, T> FilterHolesExtend<T, &'a mut TupleInputHole> for FilterHoles<&'a mut TupleInputHole> {
    type Output = T;

    fn extend(&self, tup: T, _elem: &'a mut TupleInputHole) -> T {
        tup
    }
}
{% for i in range(0, MAX_ARITY + 1) %}
impl<'a,{{" "}}
    {%- for j in range(0, i + 1) %}P{{j}}{{"" if loop.last else ", "}}{% endfor -%}
> FilterHolesExtend<(
    {%- for j in range(0, i) -%}
        P{{j}}{{"" if loop.last else ", "}}{{ "," if loop.first and loop.last else "" }}
    {%- endfor -%}
), P{{i}}> for FilterHolesPositive<P{{i}}> {
    type Output = (
        {%- for j in range(0, i + 1) -%}
            P{{j}}{{"" if loop.last else ", "}}{{ "," if loop.first and loop.last else "" }}
        {%- endfor -%}
    );

    fn extend(&self, {{ "tup" if i > 0 else "_tup" }}: ({%- for j in range(0, i) -%}
        P{{j}}{{"" if loop.last else ", "}}{{ "," if loop.first and loop.last else "" }}
    {%- endfor -%}), elem: P{{i}}) -> Self::Output {
        ({% for j in range(0, i) %}tup.{{j}}, {% endfor %}elem{{"," if i == 0 else "" }})
    }
}
{% endfor %}
// === Macro definition === //

{% set MACROS_PREFIX = "$crate::macro_internal" -%}

/// This macro takes a **mutable reference** to a tuple and decomposes it into a sub-tuple
/// (i.e. a tuple containing a subset of the values contained in the parent tuple).
///
/// ## Syntax
///
/// There are three ways in which this macro can be used...
///
/// ##### ...in an **expression**:
///
/// [Jump to the "summary" section](#summary)
///
/// These forms are useful when calling a function with a desired subset of the available context.
///
/// ```
/// use compost::decompose;
///
/// let mut input = (1i32, &mut 2u32, 'c');
///
/// fn example(cx: (&i32, &mut u32)) {
///     assert_eq!(cx, (&1, &mut 2));
/// }
///
/// // Can be used when calling a function...
/// example(decompose!(input));
///
/// // ...or when assigning to a variable.
/// let cx_subset: (&mut u32, &mut char) = decompose!(input);
/// assert_eq!(cx_subset, (&mut 2, &mut 'c'));
///
/// // Which is equivalent to:
/// let cx_subset = decompose!(input => (&mut u32, &mut char));
/// assert_eq!(cx_subset, (&mut 2, &mut 'c'));
/// ```
///
/// ##### ...in a **statement:**
///
/// [Jump to the "summary" section](#summary)
///
/// These forms are useful for pulling context contained in a tuple into scope.
///
/// ```
/// use compost::decompose;
///
/// let mut input = (1i32, &mut 2u32, 'c', 5u8);
///
/// // Brings component references into scope and produces a `rest` value containing
/// //the remaining components.
/// //
/// // NOTE: Because `rest`'s tuple layout is unspecified, `rest` is new-typed in a
/// // macro-internal `TupleRemainder` struct to allow for backwards-compatibility-
/// // preserving changes to the maximum arity, the search mechanism, etc.
/// decompose!(input => rest & {
///     my_char: &mut char,
///     my_i32: &i32,
/// });
///
/// assert_eq!((my_char, my_i32), (&mut 'c', &1));
///
/// // `rest` can itself be decomposed several times.
/// decompose!(rest => rest & { my_u32: &u32 });
///
/// // If you're done decomposing, you can omit the `rest` parameter.
/// decompose!(rest => { my_u8: &mut u8 });
///
/// // (borrows from multiple decompose statements simultaneously)
/// assert_eq!((my_u32, my_u8), (&2, &mut 5));
/// assert_eq!(my_i32, &1);  // (remains valid!)
/// ```
///
/// ##### ...in an **expression** producing a "rest" tuple:
///
/// [Jump to the "summary" section](#summary)
///
/// These forms are useful for passing context to a method while allowing you to decompose the
/// remainder while the borrow is still ongoing.
///
/// ```
/// use compost::decompose;
///
/// #[derive(Debug)]
/// struct MyThing1<'a>(&'a mut i32, &'a mut u32);
///
/// impl<'a> MyThing1<'a> {
///     fn new((a, b): (&'a mut i32, &'a mut u32)) -> Self {
///         Self(a, b)
///     }
/// }
///
/// #[derive(Debug)]
/// struct MyThing2<'a>(&'a mut char);
///
/// impl<'a> MyThing2<'a> {
///     fn new((c,): (&'a mut char,)) -> Self {
///         Self(c)
///     }
/// }
///
/// fn do_something(mut cx: (&mut i32, &mut u32, &mut char, &str, &mut u8)) {
///     // NOTE: Because `rest`'s tuple layout is unspecified, `rest` is new-typed in a
///     // macro-internal `TupleRemainder` struct to allow for backwards-compatibility-
///     // preserving changes to the maximum arity, the search mechanism, etc.
///     let (ctor_args, mut cx) = decompose!(...cx);
///     let thing_1 = MyThing1::new(ctor_args);
///
///     let (ctor_args, mut cx) = decompose!(...cx);
///     let thing_2 = MyThing2::new(ctor_args);
///
///     dbg!(&thing_1);
///     dbg!(&thing_2);
///
///     // This syntax can also be combined with the type-annotated tuple syntax.
///     let (the_str, mut cx) = decompose!(...cx => (&str));
///     dbg!(the_str);
///
///     let the_u8 = decompose!(cx => (&u8));
///     dbg!(the_u8);
/// }
///
/// do_something((&mut 1, &mut 2, &mut 'c', "d", &mut 5));
/// ```
///
/// ##### ...in an expression decomposing `TupleRemainder`:
///
/// [Jump to the "summary" section](#summary)
///
/// This one's a bit wacky. Recall how rest tuples aren't actually tuples but rather macro-internal
/// `TupleRemainder` newtypes that should not, under any circumstance, be tampered with manually? Well,
/// this form of the macro provides a way to safely tamper with these newtypes.
///
/// ```
/// use compost::decompose;
///
/// # fn main() {
/// let mut cx = (1i32, &2u32, &mut 3u8, 'd', "e");
///
/// decompose!(cx => rest & { my_char: &char });
///
/// // The type of `rest` is a `TupleRemainder<(...)>` where the type parameter of this
/// // newtype is an implementation detail. Let's change that!
/// let rest = decompose!(rest => (&mut ...));
///
/// // As the syntax suggests, the type of rest is now...
/// let rest: (&'_ mut i32, &mut &u32, &mut &mut u8, &mut &str) = rest;
/// //          ^ these lifetimes are the lifetime  ^ also notice how "&mut char"
/// //            of the mutable reference to the     is missing but the order is
/// //            input `rest` variable.              otherwise preserved?
///
/// let mut cmp_u8 = &mut 3u8;  // (done because `&mut T` forces `T` to be invariant
///                             //  w.r.t its lifetime, causing weird type coercions
///                             // and lifetime errors)
/// assert_eq!(my_char, &'d');
/// assert_eq!(rest, (&mut 1i32, &mut &2u32, &mut cmp_u8, &mut "e"));
///
/// // Of course, as a gesture of kindness towards other macro authors, this macro
/// // works for regular tuples as well:
/// let cx = decompose!(cx => (&mut ...));
/// let cx: (&'_ mut i32, &mut &u32, &mut &mut u8, &mut char, &mut &str) = cx;
/// //                                             ^ our "&mut char" is back!
/// # }
/// ```
///
/// The tuple returned from this form cannot be used in a fashion identical to its soure tuple.
/// Recall: every element in the tuple now has an additional `&mut` indirection to it.
///
/// So, this doesn't work:
///
/// ```compile_fail
/// use compost::decompose;
///
/// let mut cx = (&1i32, &2u32);
/// decompose!(cx => { my_i32: &i32, my_u32: &u32 });  // works!
///
/// let mut cx = decompose!(cx => (&mut ...));
/// decompose!(cx => { my_i32: &i32, my_u32: &u32 });  // doesn't work!
/// ```
///
/// But this does:
///
/// ```
/// use compost::decompose;
///
/// let mut cx = (&1i32, &2u32);
/// decompose!(cx => { my_i32: &i32, my_u32: &u32 });  // works!
///
/// let mut cx = decompose!(cx => (&mut ...));
/// decompose!(cx => { my_i32: &mut &i32, my_u32: &&u32 });  // also works but is different!
/// ```
///
/// ##### ...in a **combination of (most of) them**:
///
/// [Jump to the "summary" section](#summary)
///
/// ```
/// use compost::decompose;
///
/// struct MyThing {
/// # /*
///     ...
/// # */
/// }
///
/// impl MyThing {
///     pub fn do_something<'a>(&mut self, deps: (&'a u32, &'a mut i32, &'a char)) -> &'a char {
///         dbg!(&deps);
///         deps.2
///     }
///
///     pub fn do_something_else(&mut self, deps: (&u8,)) {
///         dbg!(deps);
///     }
/// }
///
/// fn do_something(mut cx: (&mut MyThing, &mut u32, &mut i32, char, u8)) {
///     // Acquire a reference to the `MyThing` instance.
///     decompose!(cx => cx_rest & { thing: &mut MyThing });
///
///     // Call a method on it with even more context.
///     let (args, mut cx_rest) = decompose!(...cx_rest);
///     let my_char = thing.do_something(args);
///
///     // Call another unrelated method without rest decomposition.
///     thing.do_something_else(decompose!(cx_rest));
///
///     // `my_char` remains valid!
///     dbg!(my_char);
/// }
/// ```
///
/// ### Summary
///
/// In summary, here are the [expression forms](#in-an-expression) available for this macro:
///
/// - `decompose!($expr) -> (T1, T2, T3)`:<br>
///   Decomposes a tuple into a subset tuple.
///
/// - `decompose!($expr => ($T1, $T2, $T3)) -> (T1, T2, T3)`:<br>
///   Decomposes a tuple into a subset tuple with explicit type annotations.
///
/// Here are the [expression with rest forms](#in-an-expression-producing-a-rest-tuple) available for
/// this macro:
///
/// - `decompose!(...$expr) -> ((T1, T2, T3), TupleRemainder<_>)`:<br>
///   Decomposes a tuple into a subset tuple and the remainder of the input tuple after the borrow.
///
/// - `decompose!(...$expr => ($T1, $T2, $T3)) -> ((T1, T2, T3), TupleRemainder<_>)`:<br>
///   Decomposes a tuple into a subset tuple and the remainder of the input tuple after the borrow
///   with explicit type annotations.
///
/// Here is the one form to help you [decompose a `TupleRemainder`](#in-an-expression-decomposing-tupleremainder)
/// into its actual components:<br>
///
/// - `decompose!($expr => (&mut ...)) -> (&mut T1, &mut &T2, &mut &mut T3)`:<br>
///   Given a mutable reference to a tuple (newtyped through `TupleRemainder` or otherwise), it
///   decomposes the input tuple into a new tuple with a mutable reference to every component in
///   that tuple.
///
/// And here are its [statement forms](#in-a-statement):
///
/// - `decompose!($expr => { $var_1: $T1, $var_2: $T2, $var_3: $T3 });`:<br>
///   Decomposes a tuple into `n` different components and brings them in scope under the specified
///   names.
///
/// - `decompose!($expr => $rest_name & { $var_1: $T1, $var_2: $T2, $var_3: $T3 });`:<br>
///   Decomposes a tuple into `n` different components and brings them in scope under the specified
///   names. Brings the remainder of the input tuple into scope under the specified `$rest_name`.
///
/// ## What Can Be Borrowed?
///
/// ##### Rule 1
///
/// `decompose!` expects a mutable reference to the tuple it is decomposing. Thus, this is not valid:
///
/// ```compile_fail
/// use compost::decompose;
///
/// fn example(cx: (&i32, &u32)) {
///     decompose!(cx => { my_i32: &i32 });
///     dbg!(my_i32);
/// }
/// ```
///
/// but this is:
///
/// ```
/// use compost::decompose;
///
/// fn example(mut cx: (&i32, &u32)) {  // (see how the `cx` variable itself is now mut?)
///     decompose!(cx => { my_i32: &i32 });
///     dbg!(my_i32);
/// }
/// ```
///
///  ##### Rule 2
///
/// `decompose!` always decomposes tuples into tuples, even if they're **single element tuples.**
///
/// Thus, this is not valid:
///
/// ```compile_fail
/// use compost::decompose;
///
/// fn takes_cx(cx: &i32) {
///     dbg!(cx);
/// }
///
/// fn example(mut cx: (&i32, &u32)) {
///     takes_cx(decompose!(cx));
/// }
/// ```
///
/// ...but this is:
///
/// ```
/// use compost::decompose;
///
/// fn takes_cx(cx: (&i32,)) {  // (notice the trailing comma?)
///     dbg!(cx);
/// }
///
/// fn example(mut cx: (&i32, &u32)) {
///     takes_cx(decompose!(cx));
/// }
/// ```
///
/// Note the **trailing comma** in `(&i32,)`, which differentiates single element tuples from
/// grouping parentheses around types.
///
///  ##### Rule 3
///
/// Components in the input tuple can be anything. They can be references, mutable references, smart pointers,
/// owned instances, etc. However, components in the output tuple must be **immutable or mutable** references.
///
/// A reference can be decomposed from an input tuple if the input tuple has some element that implements [`Borrow<T>`](Borrow)
/// (or [`BorrowMut<T>`](BorrowMut) if the reference being requested is mutable) to that specific type `T`.
///
/// ```
/// use core::borrow::Borrow;
/// use compost::decompose;
///
/// fn example<T: Borrow<V>, V>(mut cx: (T,)) {
///     decompose!(cx => { v: &V });
///
///     // Of course, you can still borrow the original value as well...
///     decompose!(cx => { v: &mut T });
/// }
/// ```
///
/// Note that the **actual element itself** must implement `Borrow` so, while `T: Borrow<V>`â€”
/// making it possible to decompose `&V` from an **owned** instance of `T`â€”`&'_ T` does not, making
/// that decomposition invalid. You'd need to adjust your generic parameter bounds to make that work:
///
/// ```
/// use core::borrow::Borrow;
/// use compost::decompose;
///
/// fn example<'a, T, V>(mut cx: (&'a mut T,))
/// where
///     &'a mut T: Borrow<V>,
///  {
///     decompose!(cx => { v: &V });
/// }
/// ```
///
///  ##### Rule 4
///
/// The element of the tuple providing the appropriate `Borrow` implementation must
/// be unambiguous. This implies, in the general case, that you cannot borrow an element when
/// that element is present multiple times in the input tuple:
///
/// ```compile_fail
/// use compost::decompose;
///
/// fn example(mut cx: (&i32, &mut i32, &u32, Box<u32>)) {
///     decompose!(cx => {
///         my_i32: &i32,
///         my_u32: &u32,
///     });
///     dbg!((my_i32, my_u32));
/// }
/// ```
///
/// Funnily enough, this works:
///
/// ```
/// use compost::decompose;
///
/// fn example(mut cx: (&i32, &mut i32, &u32, Box<u32>, &char, &char, &char)) {
///     decompose!(cx => {
///         // There's only one element in the input tuple that can give a **mutable
///         // reference** to these respective elements.
///         my_i32: &mut i32,
///         my_u32: &mut u32,
///
///         // Also, even though `&char` shows up *thrice* in the context tuple, it
///         // is not used anywhere in the decomposition so it is fine.
///     });
///     dbg!((my_i32, my_u32));
/// }
/// ```
///
///  ##### Rule 5
///
/// Finally, elements used in a tuple decomposition can only be used once,
/// even if **they could theoretically be shared.**
///
/// ```compile_fail
/// use compost::decompose;
///
/// fn example(mut cx: (&i32, &u32)) {
///     // This works well but...
///     decompose!(cx => rest & { my_first_i32_ref: &i32 });
///
///     // This fails!
///     decompose!(rest => { my_second_i32_ref: &i32 });
///
///     dbg!((my_first_i32_ref, my_second_i32_ref));
/// }
/// ```
///
/// ## Caveats
///
/// **Caveat 1:** Because variadic tuples are not a thing yet, the maximum arity of (number of elements in)
/// both the input and output tuples is **{{MAX_ARITY}}**. This value is configurable in the source code
/// (see: `src/generated/decompose.rs.jinja`'s `MAX_ARITY` template variable).
///
/// **Caveat 2:** Because `decompose!` consumes a mutable reference to the tuple being decomposed:
///
/// 1. The tuple must be marked as mutable (but you already knew that).
/// 2. Tuple temporaries cannot be decomposed and returned from the function.
///
/// Thus, this fails to compile:
///
/// ```compile_fail
/// use compost::decompose;
///
/// fn give_me_some_things<'a>(mut cx: (&'a u32, &'a mut i32)) -> (&'a u32, &'a i32) {
///     decompose!(cx)
/// }
/// ```
#[macro_export]
macro_rules! decompose {
    // "Rest" decomposing expression
    (...$input:expr) => {
        {
            use {{MACROS_PREFIX}}::NormalizeArity;
            let input = $input.normalize_arity();
            let builder = {{MACROS_PREFIX}}::TupleBuilder::new();

            match builder.inference_helper() {
                {{MACROS_PREFIX}}::Some(var) => {
                    fn any<T>() -> T {
                        loop {}
                    }
                    (var, any())
                },
                {{MACROS_PREFIX}}::None => {
                    {%- for j in range(0, MAX_ARITY) %}
                    let (v, input) = {{MACROS_PREFIX}}::TupleSearch::search(input);
                    let (p{{j}}, builder) = {{MACROS_PREFIX}}::TupleBuilderId::id(builder, v);{{"\n"}}
                    {%- endfor %}
                    let _builder = builder;

                    (
                        {{MACROS_PREFIX}}::ArityTruncate::truncate_arity((
                            {%- for j in range(0, MAX_ARITY) -%}
                            p{{j}}{{ "" if loop.last else ", " }}
                            {%- endfor -%}
                        )),
                        {{MACROS_PREFIX}}::TupleRemainder { macro_internal_dont_touch: input },
                    )
                }
            }
        }
    };

    // Annotated "rest" decomposing expression
    (...$input:expr => (
        $($ty:ty),*$(,)?
    )) => {
        {{MACROS_PREFIX}}::identity::<(
            ($($ty,)*),
            _,
        )>($crate::decompose!(...$input))
    };

    // Regular decomposing expression
    ($input:expr) => {
        $crate::decompose!(...$input).0
    };

    // Full decomposing expression
    ($input:expr => (&mut ...)) => {
        {
            use {{MACROS_PREFIX}}::{FilterHolesExtend, NormalizeArity};
            let input = $input.normalize_arity();
            let builder = ();
            {% for i in range(0, MAX_ARITY) -%}
            let builder = {{MACROS_PREFIX}}::FilterHoles::new(&input.{{i}}).extend(builder, input.{{i}});
            {%- endfor %}

            builder
        }
    };

    // Annotated regular decomposing expression
    ($input:expr => (
        $($ty:ty),*$(,)?
    )) => {
        {{MACROS_PREFIX}}::identity::<($($ty,)*)>($crate::decompose!($input))
    };

    // "Rest" decomposing statement
    ($input:expr => $rest:ident & {
        $($name:ident: $ty:ty),*
        $(,)?
    }) => {
        #[allow(unnecessary_mut)]
        let (($($name,)*), mut $rest): (($($ty,)*), _) = $crate::decompose!(...$input);
    };

    // Regular decomposing statement
    ($input:expr => {
        $($name:ident: $ty:ty),*
        $(,)?
    }) => {
        $crate::decompose!($input => _ignored & { $($name:$ty),* });
    };
}{{"\n"}}
